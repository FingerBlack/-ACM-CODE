{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"cou",
				"countt"
			],
			[
				"di",
				"distance"
			],
			[
				"re",
				"return"
			],
			[
				"m",
				"main\tmain()"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include<iostream>\n//#include<vector>\nusing namespace  std;\n//#define local;\nconst int maxn =0xffffff;\nint n,m,w,k;\nint dis[100000];\nstruct edge\n{\n\tint f,t,val;\n\tedge(){\n\n\t}\n\tedge(int a,int b,int c){\n\t\tf=a,t=b,val=c;\n\t}\n}edges[10000];\nbool Bellman_ford(){\n\t//设原点为0，目的是为了证明从原点出发；\n\t//如果大家初始化一样，只能找负权；\n\t//\n\tfor(int i=0;i<n ;i++){\n\t\tdis[i]=maxn;\n\t}\n\tdis[0]=0;\n\t//init the distance array\n\tfor (int i = 0; i < n-1; ++i)\n\t{\t\n\t\tint flag=0;\n\t\tfor(int j=0;j<k;j++){\n\t\t\tif(dis[edges[j].f]+edges[j].val<dis[edges[j].t]){\n\t\t\t\tdis[edges[j].t]=dis[edges[j].f]+edges[j].val;\n\t\t\t\tflag=1;\n\t\t\t}\n\t\t\t//每一次都至少找到能relax的一条边，如果找不到，意味着这个图已经不能再找了\n\t\t\t//最多要找n-1次；\n\t\t\t/*\n\t\t\tcout<<\"case \"<<j<<endl;\n\t\t\tfor(int s=0;s<k;s++){\n\t\t\t\tprintf(\"%d %d %d %d\\n\",edges[s].f,edges[s].t,dis[edges[s].f],dis[edges[s].t]);\n\t\t\t}\n\t\t\t*/\n\t\t\t\n\t\t}\n\t\tif(!flag){\n\t\t\tbreak;\n\t\t}\n\t\t/* code */\n\t}\n\t//debug\n\t/*for(int j=0;j<k;j++){\n\t\tprintf(\"%d %d %d %d\\n\",edges[j].f,edges[j].t,dis[edges[j].f],dis[edges[j].t]);\n\t}\n\t*/\n\tfor(int j=0;j<k;j++){\n\t\tif(dis[edges[j].f]+edges[j].val<dis[edges[j].t]){\n\t\t\treturn true;\t\t\n\t\t}\n\t}\n\treturn false;\n\t//\n}\nint main()\n{\n#ifdef local\nfreopen(\"in\",\"r\",stdin);\nfreopen(\"out1\",\"wt+\",stdout);\n#endif\n\tint count;\n\tcin>>count;\n\twhile(count--){\n\t\tcin>>n>>m>>w;\n\t\tint f,t,val;\n\t\tk=0;\n\t\tfor(int i=0;i<m;i++){\n\t\t\tcin>>f>>t>>val;\n\t\t\tedges[k++]=edge(f-1,t-1,val);\n\t\t\tedges[k++]=edge(t-1,f-1,val);\n\t\t}\n\t\tfor(int i=0;i<w;i++){\n\t\t\tcin>>f>>t>>val;\n\t\t\tedges[k++]=edge(f-1,t-1,-val);\n\t\t}\n\t\t//一些题的节点不一定是0开头\n\t\t//cout<<k<<endl;\n\t\tif(Bellman_ford()){\n\t\t\tcout<<\"YES\"<<endl;\n\t\t}else{\n\t\t\tcout<<\"NO\"<<endl;\n\t\t}\n\t\t//Build the map\n\t}\n\treturn 0;\n}\n",
			"file": "最小生成树/ Bellman-ford/Bellman-ford acm_code_01(求负权).cpp",
			"file_size": 1643,
			"file_write_time": 131872050035851933,
			"settings":
			{
				"buffer_size": 1592,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "#include<iostream>"
			}
		},
		{
			"file": "最小生成树/ Bellman-ford/Bellman-ford 网上代码.cpp",
			"settings":
			{
				"buffer_size": 1928,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "最小生成树/ Bellman-ford/out1",
			"settings":
			{
				"buffer_size": 7,
				"line_ending": "Unix"
			}
		},
		{
			"file": "最小生成树/ Bellman-ford/out",
			"settings":
			{
				"buffer_size": 1478,
				"line_ending": "Unix"
			}
		},
		{
			"file": "最小生成树/ Bellman-ford/Bellman-ford 网上代码",
			"settings":
			{
				"buffer_size": 41340,
				"encoding": "Hexadecimal",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Templete",
			"settings":
			{
				"buffer_size": 158,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "最小生成树/ Bellman-ford/in",
			"settings":
			{
				"buffer_size": 55,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Script Builder"
				]
			],
			[
				"Packages/LaTeXTools/LaTeX.sublime-build",
				"XeLaTeX"
			]
		],
		[
			[
				[
					"Packages/User/c.sublime-build",
					""
				],
				[
					"Packages/User/c.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/c.sublime-build",
				"Run"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"c+",
				"Build With: C++ Single File - Run"
			],
			[
				"c++",
				"Build With: C++ Single File - Run"
			],
			[
				"c",
				"Changelog"
			],
			[
				"install packa",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 136.0,
		"history":
		[
			"213",
			"cin",
			"1",
			"qw",
			"231",
			"2",
			"1",
			"3",
			"21",
			"1",
			"11",
			"123",
			"213",
			"31",
			"12",
			"3",
			"2",
			"1",
			"d",
			"b",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib2,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/chenjishuang/Documents/GitHub/-ACM-CODE",
		"/Users/chenjishuang/Documents/GitHub/-ACM-CODE/最小生成树",
		"/Users/chenjishuang/Documents/GitHub/-ACM-CODE/最小生成树/ Bellman-ford",
		"/Users/chenjishuang/Documents/GitHub/-ACM-CODE/最小生成树/测试2"
	],
	"file_history":
	[
		"/Users/chenjishuang/Documents/GitHub/-ACM-CODE/最小生成树/ Bellman-ford/Bellman-ford 网上代码",
		"/Users/chenjishuang/Documents/GitHub/-ACM-CODE/Templete",
		"/Users/chenjishuang/Documents/GitHub/-ACM-CODE/最小生成树/测试/in",
		"/Users/chenjishuang/Documents/GitHub/-ACM-CODE/最小生成树/测试2/2",
		"/Users/chenjishuang/Documents/GitHub/-ACM-CODE/最小生成树/df/something.cpp",
		"/Users/chenjishuang/Documents/GitHub/-ACM-CODE/最小生成树/df/1",
		"/Users/chenjishuang/Documents/GitHub/-ACM-CODE/最小生成树/something",
		"/Users/chenjishuang/Documents/GitHub/-ACM-CODE/最小生成树/something.cpp",
		"/Users/chenjishuang/Library/Application Support/Sublime Text 3/Packages/User/c.sublime-build",
		"/Users/chenjishuang/Documents/GitHub/-ACM-CODE/acm 模板专用/最小生成树/ceshi.cpp",
		"/Users/chenjishuang/Documents/ceshi.tex"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "最小生成树/ Bellman-ford/Bellman-ford acm_code_01(求负权).cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1592,
						"regions":
						{
						},
						"selection":
						[
							[
								85,
								85
							]
						],
						"settings":
						{
							"auto_name": "#include<iostream>",
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "最小生成树/ Bellman-ford/Bellman-ford 网上代码.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1928,
						"regions":
						{
						},
						"selection":
						[
							[
								1796,
								1777
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 366.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "最小生成树/ Bellman-ford/out1",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "最小生成树/ Bellman-ford/out",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1478,
						"regions":
						{
						},
						"selection":
						[
							[
								7,
								7
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "最小生成树/ Bellman-ford/Bellman-ford 网上代码",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41340,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Templete",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 158,
						"regions":
						{
						},
						"selection":
						[
							[
								142,
								69
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "最小生成树/ Bellman-ford/in",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 55,
						"regions":
						{
						},
						"selection":
						[
							[
								4,
								4
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 312.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.latextools":
	{
		"height": 108.0
	},
	"pinned_build_system": "Packages/C++/C++ Single File.sublime-build",
	"project": "ACM_.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 362.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
